name: Basic Workflow

on:
  push:
    branches: [ main ]

jobs:
  setup:
    runs-on: self-hosted
    environment: production

    steps:
      - uses: actions/checkout@v4

      - name: Check for changes in requirements.txt
        id: check
        run: |
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '^requirements.txt$'; then
            echo "deps_changed=true" >> $GITHUB_ENV
          else
            echo "deps_changed=false" >> $GITHUB_ENV
          fi

      - name: Run Env
        run: bash env.sh
        if: env.deps_changed == 'true'

  build:
    needs: setup
    runs-on: self-hosted
    environment: production

    steps:
      - uses: actions/checkout@v4

      - name: Create .env files
        run: |
          echo "FLASK_SECRET_KEY=${{ secrets.FLASK_SECRET_KEY }}" > .env
          echo "FLASK_DEBUG_MODE=${{ secrets.FLASK_DEBUG_MODE }}" >> .env
          echo "POSTGRES_URL=${{ secrets.POSTGRES_URL }}" >> .env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
          mkdir -p ./discord_bot/
          echo "DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }}" > ./discord_bot/.env

      - name: Run Build
        run: |
          export GITHUB_RUN_ID=${{ github.run_id }}
          bash build.sh

  test:
    needs: build
    runs-on: self-hosted
    environment: production

    steps:
      - uses: actions/checkout@v4

      - name: Create .env files
        run: |
          echo "FLASK_SECRET_KEY=${{ secrets.FLASK_SECRET_KEY }}" > .env
          echo "FLASK_DEBUG_MODE=${{ secrets.FLASK_DEBUG_MODE }}" >> .env
          echo "POSTGRES_URL=${{ secrets.POSTGRES_URL }}" >> .env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
          mkdir -p ./discord_bot/
          echo "DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }}" > ./discord_bot/.env

      - name: Run Tests
        id: tests
        run: |
          docker-compose --profile test up --exit-code-from assistant_test assistant_test

      - name: Set Test Status if Failed
        if: ${{ failure() }}
        run: echo "TEST_STATUS=failed" >> $GITHUB_ENV

      - name: Cleanup Docker images from that run
        if: env.TEST_STATUS == 'failed'
        run: |
          export GITHUB_RUN_ID=${{ github.run_id }}
          docker stop $(docker ps -a -q -f "label=workflow=$GITHUB_RUN_ID")
          docker rm $(docker ps -a -q -f "label=workflow=$GITHUB_RUN_ID")

      - name: Cleanup Test Container
        if: always()
        run: |
          export GITHUB_RUN_ID=${{ github.run_id }}
          docker stop $(docker ps -a -q -f "label=assistant_test")
          docker rm $(docker ps -a -q -f "label=assistant_test")

      - name: Cleanup Unused Images
        if: always()
        run: docker image prune -f
